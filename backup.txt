import { appdb } from "./appdb";
import { functions } from "../library/function";
import { OrderItemsdb } from "./Order_details";
import { Cartdb } from "./Cart";
import { Checkoutdb } from "./Checkout"
import Stripe from "stripe";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY as string);

export class Orderdb extends appdb {
  constructor() {
    super();
    this.table = "orders";
    this.uniqueField = "id";
  }

  //   ---------------------- create new order (place order) ---------------------------------------
  async createOrder(o_discounts: number, p_gst_percentage: number, user_id: number) {
    let return_data = {
      error: true,
      message: "",
      data: {}
    }
    try {
      let where1 = `WHERE user_id=${user_id}`;
      let result1: any[] = await this.select("cart", 'id', where1, this.orderby, this.limit);



      if (result1.length === 0 || !result1) {
        return_data.message = "NO ITEMS ARE AVAILABLE IN CART..PLZ ADD PRODUCT IN CART";
        return return_data;
      }
      const cartId = result1[0].id;

      let tb1 = `cart join products on cart.product_id=products.id`;
      let field1 = `cart.product_id, cart.cart_quantity, products.p_price,products.p_discount,products.p_hsn_code`;
      let where2 = `where cart.user_id = ${user_id}`;
      let cartItems: any[] = await this.select(tb1, field1, where2, this.orderby, this.limit);

      if (!cartItems || cartItems.length === 0) {
        return_data.message = "NO ITEMS FOUND IN CART TO ORDER...";
        return return_data;
      }

      let productTotal: number = 0;
      let productDiscount: number = 0;
      let totalWithoutGST: number = 0;
      let additionalDiscount: number = 0;
      let totalDiscounts: number = 0;

      cartItems.forEach((item) => {
        productTotal += item.p_price * item.cart_quantity;
        productDiscount += (productTotal * item.p_discount) / 100;
        totalWithoutGST += productTotal - productDiscount;
        totalDiscounts += productDiscount;
      });

      additionalDiscount = (totalWithoutGST * o_discounts) / 100;

      const discountedTotal = totalWithoutGST - additionalDiscount;
      const gstAmount = Math.round((discountedTotal * p_gst_percentage) / 100);
      const totalWithGST = Math.round(discountedTotal + gstAmount);

      totalDiscounts += additionalDiscount;

      // ---- get shipping address -----------------


      let checkoutObj = new Checkoutdb();
      let wh7 = `WHERE user_id=${user_id}`;
      let address_items: any = await checkoutObj.select("shipping_address", "*", wh7, this.orderby, this.limit);
      console.log("shipping add get :", address_items[0]);

      // -------- get user details -----------------------

      let wh5 = `WHERE id=${user_id}`;
      let get_userDetails: any = await this.select("users", "*", wh5, this.orderby, this.limit);
      console.log("u-details", get_userDetails[0]);


      let data: any = {
        user_id, o_total: productTotal, o_discounts: totalDiscounts, o_gross_amt: discountedTotal, o_gst: gstAmount, o_net_amt: totalWithGST, o_address1: address_items[0].sh_address1, o_address2: address_items[0].sh_address2, o_city: address_items[0].sh_city, o_state: address_items[0].sh_state, o_country: address_items[0].sh_country, o_pincode: address_items[0].sh_pincode, o_latitude: address_items[0].sh_latitude, o_logitude: address_items[0].sh_logitude,
      };
      let neworder = await this.insertRecord(data);
      let orderId: number = neworder;

      for (let item of cartItems) {
        let OrderItemsObj = new OrderItemsdb();

        let data: any = {
          order_id: orderId,
          product_id: item.product_id,
          oi_quantity: item.cart_quantity,
          oi_price: item.p_price,
          oi_total: item.p_price * item.cart_quantity,
        };
        let result4 = await OrderItemsObj.insertRecord(data);

        if (!result4) {
          return_data.message = "NOT INSERTED IN ORDER_ITEMS..";
          return return_data;
        }
      }

      let cartObj = new Cartdb();
      let res1 = await cartObj.deleteRecord(cartId);
      return_data.error = false;
      return_data.data = res1;
      return_data.message = "ORDER CREATE SUCCESSFULLY...";

    } catch (error) {
      console.error("Error in create order:", error);
      return_data.message = "Error in create order"
    }
    return return_data;
  }

  // ------------------------------ get all order items ---------------------------------

  async getAllOrderItems() {
    let return_data = {
      error: true,
      message: "",
      data: {}
    }
    try {
      let result: any = await this.select("order_items", "*", this.where, this.orderby, this.limit);
      if (!result || result.length === 0) {
        return_data.message = "NO ANY ORDER_ITEMS FOUND.."
      }
      return_data.error = false;
      return_data.data = result;
      return_data.message = "GET ALL ORDER_ITEMS SUCCESS...."
    } catch (error) {
      console.error("Error in get order:", error);
      return_data.message = "Error in get order"
    }
    return return_data;
  }

  // ---------------------------- get all orders ----------------------------------------------

  async getAllorders() {
    let return_data = {
      error: true,
      message: "",
      data: { result: [] }
    }
    try {
      let result: any = await this.select(this.table, "*", this.where, this.orderby, this.limit);
      if (!result || result.length === 0) {
        return_data.message = "NO ANY ORDER FOUND.."
      }
      return_data.error = false;
      return_data.data = result;
      return_data.message = "GET ALL ORDER SUCCESS...."

    } catch (error) {
      console.error("Error in get order:", error);
      return_data.message = "Error in get order"
    }
    return return_data;
  }

  // ---------------------------------- delete orders -------------------------------

  async deleteOrders(id: number) {
    let return_data = {
      error: true,
      message: "",
      data: {}
    }
    try {
      this.where = `where order_id=${id}`;
      let order_delete: any = await this.delete("order_items", this.where);

      if (!order_delete) {
        return_data.message = "NO ITEMS FOUND IN ORDER..";
        return return_data;
      }

      let wh1 = `where id = ${id}`;
      let orderItems_delete: any = await this.delete(this.table, wh1);
      if (!orderItems_delete) {
        return_data.message = "NO ITEMS DELETED IN ORDER_ITEMS...";
        return return_data;
      }
      return_data.error = false;
      return_data.data = orderItems_delete;
      return_data.message = "ORDER DELETE SUCCESS.."

    } catch (error) {
      console.error("Error in delete order:", error);
      return_data.message = "Error in delete order"
    }
    return return_data;
  }

  //   ----------------------- get current user orders ----------------------------------

  async getCurrentUserOrders(id: number) {
    let return_data = {
      error: true,
      message: "",
      data: {}
    }
    try {
      let where = `WHERE id=${id}`;
      let result: any = await this.select("users", "*", where, this.orderby, this.limit);

      if (!result || result.length === 0) {
        return_data.message = "USER NOT FOUND..";
        return return_data;
      }

      let fields = `orders.id AS order_id`;
      let where2 = `WHERE orders.user_id=${id}`;
      this.orderby = `ORDER BY orders.o_created_at desc`;
      let result2: any[] = await this.select(this.table, fields, where2, this.orderby, this.limit);

      let productIdQry: any[] = await Promise.all(
        result2.map(async (order: any) => {
          let f2 = `p.id AS product_id`;
          let w2 = `WHERE oi.order_id=${order.order_id}`;
          let or2 = `order_items oi JOIN products p ON oi.product_id=p.id`;
          let productQry: any = await this.select(or2, f2, w2, "", this.limit);
          return {
            order_id: order.order_id,
            products: productQry,
          };
        })
      );
      return_data.error = false;
      return_data.data = {
        username: result[0]?.u_name,
        orders: productIdQry,
      }
      return_data.message = "GET SUCCESS.."

    } catch (error) {
      console.error("Error in get current user order:", error);
      return_data.message = "Error in get current user order"
    }
    return return_data;
  }


  async Checkout(cartItems: any[], userId: number, o_discounts: number, p_gst_percentage: number) {
    let return_data = {
      error: true,
      message: "",
      data: {}
    }
    try {
      const lineItems = cartItems.map((item: any) => ({
        price_data: {
          currency: "inr",
          product_data: {
            name: item.p_name,
            images: [item.p_img],
          },
          unit_amount: item.p_price * 100,
        },
        quantity: item.cart_quantity,
      }));

      const session = await stripe.checkout.sessions.create({
        payment_method_types: ["card"],
        line_items: lineItems,
        mode: "payment",
        success_url: `${process.env.FRONTEND_URL}/success?session_id={CHECKOUT_SESSION_ID}&user_id=${userId}`,
        cancel_url: `${process.env.FRONTEND_URL}/cancel`,
        metadata: { userId },
      });

      return_data.error = false;
      return_data.data = { sessionId: session.id };
      return_data.message = "PAYMET SUCCESS..";
    }
    catch (error) {
      console.error("Error in get current user order:", error);
      return_data.message = "Error in get current user order"
    }
    return return_data;
  }
}





---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



//   ---------------------- create new order (place order) ---------------------------------------
  async createOrder(user_id: number) {
    let return_data = {
      error: true,
      message: "",
      data: {}
    };

    try {

      let whe2 = `WHERE id=${user_id}`
      let res2: any = await this.select("users", "u_email", whe2, this.orderby, this.limit);
      console.log(res2[0].u_email);

      let where1 = `WHERE user_id=${user_id}`;
      let result1: any[] = await this.select("cart", "id", where1, this.orderby, this.limit);

      if (!result1.length) {
        return_data.message = "NO ITEMS AVAILABLE IN CART. PLEASE ADD PRODUCTS.";
        return return_data;
      }

      const cartId = result1[0].id;

      let tb1 = `cart join products on cart.product_id=products.id`;
      let field1 = `cart.product_id,cart.cart_quantity,products.p_name,products.p_img,products.p_price,products.p_discount,products.p_hsn_code`;
      let where2 = `where cart.user_id = ${user_id}`;
      let cartItems: any[] = await this.select(tb1, field1, where2, this.orderby, this.limit);
      console.log(cartItems);

      if (!cartItems.length) {
        return_data.message = "NO ITEMS FOUND IN CART TO ORDER.";
        return return_data;
      }

      let productTotal = 0;
      cartItems.forEach((item) => {
        productTotal += item.p_price * item.cart_quantity;
      });

      const discount = Math.round((productTotal * 10) / 100);
      const discountedTotal = productTotal - discount;
      const gstPercentage = 12;
      const gstAmount = Math.round((discountedTotal * gstPercentage) / 100);
      const totalWithGST = Math.round(discountedTotal + gstAmount);


      const lineItems = cartItems.map((item) => ({
        price_data: {
          currency: "INR",
          product_data: {
            name: item.p_name,
            images: item.p_img ? [item.p_img] : [],
          },
          unit_amount: Math.round((item.p_price - (item.p_price * 0.10)) * 100),
        },
        quantity: item.cart_quantity,
      }));


      lineItems.push({
        price_data: {
          currency: "inr",
          product_data: { name: `GST (${gstPercentage}%)`, images: [] },
          unit_amount: Math.round(gstAmount * 100),
        },
        quantity: 1,
      });
      console.log(lineItems);

      const session = await stripe.checkout.sessions.create({
        payment_method_types: ["card"],
        mode: "payment",
        line_items: lineItems,
        success_url: `${process.env.FRONTEND_URL}/success?session_id={CHECKOUT_SESSION_ID}`,
        cancel_url: `${process.env.FRONTEND_URL}/cancel`,
        metadata: { userId: user_id.toString() },
        customer_email: res2[0].u_email,
        billing_address_collection: "required",
        shipping_address_collection: {
          allowed_countries: ["IN"],
        },
        shipping_options: [
          {
            shipping_rate_data: {
              type: "fixed_amount",
              fixed_amount: { amount: 5000, currency: "INR" },
              display_name: "Standard Shipping",
            },
          },
        ],
      });

      console.log("metadata->", session);

      return_data.error = false;
      return_data.data = { sessionId: session.id };
      console.log("session id ", return_data.data)
      return_data.message = "REDIRECTING TO PAYMENT PAGE...";

    } catch (error) {
      console.error("Error in createOrder:", error);
      return_data.message = "Error in processing the order.";
    }

    return return_data;
  }



  // ------------------------ save --------------------------------------------------------------------

  async handlePaymentSuccess(session_id: string) {
    let return_data = {
      error: true,
      message: "",
      data: {}
    };

    try {
      const session: any = await stripe.checkout.sessions.retrieve(session_id, {
        expand: ["shipping_details", "customer_details"],
      });
      console.log("session->", session);

      const user_id = parseInt(session.metadata.userId, 10);
      console.log("u-id->", user_id);

      const shipping = session.shipping_details?.address;
      if (!shipping) {
        return_data.message = "SHIPPING DETAILS NOT FOUND.";
        return return_data;
      }

      let tb1 = `cart JOIN products ON cart.product_id=products.id`;
      let field1 = `cart.product_id, cart.cart_quantity, products.p_price,products.p_discount,products.p_hsn_code`;
      let where2 = `where cart.user_id = ${user_id}`;
      let cartItems: any[] = await this.select(tb1, field1, where2, this.orderby, this.limit);
      console.log(cartItems);

      if (!cartItems.length) {
        return_data.message = "NO ITEMS FOUND IN CART.";
        return return_data;
      }

      const productTotal = cartItems.reduce((total, item) => total + item.p_price * item.cart_quantity, 0);
      const discount = Math.round((productTotal * 10) / 100);
      const discountedTotal = productTotal - discount;
      const gstAmount = Math.round((discountedTotal * 12) / 100);
      const totalWithGST = discountedTotal + gstAmount;

      let shippingData = {
        user_id,
        sh_address1: shipping.line1,
        sh_address2: shipping.line2 || "",
        sh_city: shipping.city,
        sh_state: shipping.state,
        sh_country: shipping.country,
        sh_pincode: shipping.postal_code,
        sh_latitude: null,
        sh_longitude: null
      };

      console.log("sh-add->", shippingData);
      let checkoutObj = new Checkoutdb();
      await checkoutObj.insertRecord(shippingData);

      let orderData = {
        user_id,
        o_total: productTotal,
        o_discounts: discount,
        o_gross_amt: discountedTotal,
        o_gst: gstAmount,
        o_net_amt: totalWithGST,
        o_payment_id: session_id,
        o_address1: shipping.line1,
        o_address2: shipping.line2 || "",
        o_city: shipping.city,
        o_state: shipping.state,
        o_country: shipping.country,
        o_pincode: shipping.postal_code
      };

      let newOrder = await this.insertRecord(orderData);
      console.log("Order Inserted:", newOrder);

      if (!newOrder) {
        return_data.message = "ORDER CREATION FAILED!";
        return return_data;
      }
      let orderId = newOrder;

      for (let item of cartItems) {
        let orderItemData = {
          order_id: orderId,
          product_id: item.product_id,
          oi_quantity: item.cart_quantity,
          oi_price: item.p_price,
          oi_total: item.p_price * item.cart_quantity
        };
        let OrderItemsObj = new OrderItemsdb();
        await OrderItemsObj.insertRecord(orderItemData);
      }
      let cartObj = new Cartdb();
      await cartObj.deleteRecord(user_id);

      return_data.error = false;
      return_data.message = "YOUR ORDER SUCCESSFULLY PLACED...!";

    } catch (error) {
      console.error("Error in handlePaymentSuccess:", error);
      return_data.message = "Error in saving order details.";
    }
    return return_data;
  }